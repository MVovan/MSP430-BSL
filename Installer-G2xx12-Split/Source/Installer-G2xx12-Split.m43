; Installer-G2xx12-Split.m43

; This is the universal installer of the custom "Split" bootstrap loader for TI
; MSP430G2xx12 controllers which ship with no built-in BSL. The assembled code
; should be flashed to the MCU with a Launchpad, and on first run it will "format"
; the chip for future BSL flashing using the Windows console app BSLG2xx12.exe
; included elsewhere in this project.
;
; This system works for all MSP430G parts with these characteristics:
;
;  - No built-in BSL code                    G2xx1 and G2xx2
;  - 1K to 8K of flash MAIN memory           excluding G20xx - only 512B of flash
;  - At least 1 MHz DCO calibration
;  - INFOA-stored calibration data limited to ADC10 and DCO, beginning at 0x10DC
;  - The TA0 CCIS0 input must be on P1.1
;
; This includes the G21x1, G22x1, G2x02, G2x12, G2x52, and G2x32 parts, including
; the popular G2231 and G2452. This universal installer works as-is for all such
; parts without the need to re-assemble.
;
; The installer will write the first portion of the BSL code to the first 96
; bytes of MAIN memory, and the second portion into INFOA, INFOB, and INFOC. Then
; it will change the reset vector to point to the BSL entry point at the start of
; MAIN.  In addition, if the MCU comes with only 1 MHz DCO calibration data, the
; installer will determine the correct 8, 12 and 16 MHz calibration values and
; save them at the standard locations in INFOA.  INFOD is not used by this Split
; version of BSL, so it is available for use by the application.
;
; This code is written for the NAKEN ASSEMBLER written by Michael Kohn.
;
;    https://www.mikekohn.net/micro/naken_asm.php
;
; If you wish to make changes, put your revised .m43 and .inc files in the same
; folder as naken_asm.exe, and run that program in a CMD window.  The new
; assembled code will be in out.hex.
;
; When the MCU is powered up the first time after flashing this installer, please
; allow five seconds for it to complete the installation process before touching
; it or removing power.  By default, there is no indication that completion has
; occurred.  However, there is a commented block of code which would set P1.6 as
; a high output.  So an LED and resistor connected to that pin, as is the case
; with the G2 Launchpad, would indicate completion.  This is not enabled by
; default because BSL might be installed in-circuit where P1.6 going high might
; result in a short. To enable the LED indicator, un-comment that section and
; reassemble, or just make the following change directly to the .hex file for
; this installer:
;
; Replace:
; :10FD600003430343034303430343034332C232D0F9
;
; With:
; :10FD6000F2D040002100F2D04000220032C232D056
;
; Please note that the calibration process requires a Vcc of at least 3.3V.
;
;  The original version of the BSL code included here appears in
;  "MSP430BSL_1_00_12_00.zip" which is provided by Texas Instruments, which
;  requires the following notices appearing in the original source code be
;  retained here:

; *******************************************************************************

;  The original version of the BSL code presented below beginning at "BSLCode:" appears
;  in "MSP430BSL_1_00_12_00.zip" which is provided by Texas Instruments, which requires
;  the following notices appearing in the original source code be retained here:
;
;  Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/
;
;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions
;  are met:
;
;    Redistributions of source code must retain the above copyright
;    notice, this list of conditions and the following disclaimer.
;
;    Redistributions in binary form must reproduce the above copyright
;    notice, this list of conditions and the following disclaimer in the
;    documentation and/or other materials provided with the
;    distribution.
;
;    Neither the name of Texas Instruments Incorporated nor the names of
;    its contributors may be used to endorse or promote products derived
;    from this software without specific prior written permission.
;
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
;  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
;  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
;  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
;  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;
; *******************************************************************************

.msp430

.include "msp430g2231.inc"

;-------------------------------------------------------------------------------
;	     Portion of BSL Application in INFO memory
;-------------------------------------------------------------------------------

;*******************************************************************************
; This is the "Split" version of a custom bootstrap loader for MSP430G2xx12 parts
; with no built-in BSL.  It resides in the first 96 bytes of MAIN memory. and in
; most of INFOA and all of INFOB and C.  It does not use any of INFOD. The
; Windows console app BSLG2xx12.EXE is used together with this BSL code to flash
; new firmware to the MCU using a USB-to-serial adapter. All applications flashed
; to the device using this version must begin execution at the beginning of MAIN
; memory + 0x60, which should also be the reset vector shown in the firmware .hex
; file. The Windows app will automatically change the reset vector read from the
; .hex firmware file so that it points instead to the beginning of the BSL code at
; MAIN.  If BSL flashing is not being invoked on reset, the BSL code will jump to
; MAIN + 0x60.
;
; The BSL uses a software UART to communicate with the Windows app.
; It receives data on P1.1, and transmits on P1.2.  The /Reset pin may also be
; connected to the adapter's DTR output which allows the Windows app to reset the
; MCU to start a BSL session, but such a connection should not be left in place
; when the adapter is powered down.
;
; The original source code for this BSL appears in "MSP430BSL_1_00_12_00.zip"
; which is provided by Texas Instruments. See the copyright notice and related
; material at the beginning of this file.
;
; The protocol used here is the same as provided for in the original, with the
; following exceptions:
;
; 1.  P1.1 is used as both the RXD pin and the BSLPIN on the Gxxx.  A high
;     reading on BSLPIN when the pulldown resistor is enabled indicates an active
;     USB connection exists, and BSL flashing is being invoked.
;
; 2.  At the beginning of the protocol, if the custom BSL receives a character
;     from the Windows app master, but it is NOT the correct CMD_SYNC character,
;     BSL will transmit an ACK back to the master, then await another byte.
;     The ACK gives the master the option to confirm that BSL is there and
;     listening, and the value of the ACK tells it which version of BSL is
;     installed, and where MAIN begins, so it can make sure the new firwmare file
;     matches before sending the correct character to begin the flashing process.
;
; 3.  The original version was contained entirely in INFO memory.
;*******************************************************************************

RAMM		equ	0x0200
INFOBASE	equ	0x1040			;bottom of INFOC (INFOD not used)
INFOABASE	equ	0x10C0			;bottom of INFOA
LPM4		equ	0xF0			;Low Power Mode - all off
DoneFlag	equ	0x40			;for P1.6, if used
CalibLoc	equ	0x10DC			;calibration data location

OVERdelay    equ    0x0FFF		    ; These values will be overwritten to reflect BSL
OVERmain     equ    0xFF00		    ;	 type (INFO or Split) and address of MAIN
OVERapp      equ    0xFF60		    ;	 memory (0xE000, 0xF000, 0xF800, or 0xFC00).

;	    CPU registers used for BSL
rBitCnt	     equ    R5
rxData	     equ    R6
rCHKSUM      equ    R7
rPoint	     equ    R8
rTemp	     equ    R9
rSource      equ    R11
rDest	     equ    R12
rCount	     equ    R13
rHighPoint   equ    R15

;	    Conditions for 9600 Baud HW/SW UART, MCLK 1 MHz
;	    1 MHz / 9600 = 104.15 Cycles per bit
BITTIME_5    equ    52			    ; 0.5 bit length
BITTIME      equ    104 		    ; 104 us

;these two values report the result of XOR checksum at end
NACKCYCL     equ    BITTIME*2		    ; 2 bits low: start + 1 data bits
					    ;  0 + (1111 1110)b = 0xFE
ACKCYCL      equ    BITTIME*4		    ; 4 bits low: start + 3 data bits
					    ;  0 + (1111 1000)b = 0xF8
					    ; Meas: Puls 2us too long but no
					    ;  impact at 104us Bittime
Bit1	     equ    2
Bit2	     equ    4

RXD	     equ    Bit1       		    ; RXD on P1.1
TXD	     equ    Bit2	    	    ; TXD on P1.2
BSLPIN	     equ    Bit1		    ; BSL entry on P1.1 HIGH (Use pulldown)

;	    Command number definition
CMD_SYNC     equ    0xBA		    ; signal to begin flashing


.org	     INFOBASE			    ;Portion of BSL located in INFOB and INFOC

BASE:

;-------------------------------------------------------------------------------
MainBsl:	    ; BSL Main Loop  - Jump here from HIGHCODE portion
;-------------------------------------------------------------------------------
Wait4sync:  call    #RxOneByte                 ;Receive one byte

SyncCmd:    cmp     #CMD_SYNC,rxData	       ; Sync command received?
OV1:	    mov.w   #OVERdelay, rTemp	       ; If not - send code for SPLIT BSL version
	    jnz     SendACK

;-------------------------------------------------------------------------------
CmdFct_Erase:	    ; Erase main flash and restore interrupt vectors
;-------------------------------------------------------------------------------

EraseSeg:   mov.w   #FWKEY+MERAS,&FCTL1     ; MERAS=1. MAIN

	    mov.b   #0,0(rHighPoint)	    ; Start erase with dummy write

WrtRstVec:  mov     #FWKEY+WRT,&FCTL1	    ; WRT=1. Write to segment
	    mov     rHighPoint,&0xFFFE	     ; Point reset vector to BSL entry

	    mov.w   #RAMM,	   rSource  ; restore high portion from RAM
;	     mov.w   rHighPoint,    rDest    ;moved to MAIN section
	    call    #Copy

;-------------------------------------------------------------------------------
CmdFct_Write:	    ; Write (Flashsize - 2) Bytes to Main memory as received
;-------------------------------------------------------------------------------

	    ; ================================================================
	    ; Ensure a minimum delay of 16 ms between SYNC and first byte
	    ; ================================================================

CFW_w4d:    call    #RxOneByte

CFW_Range:  cmp     #0xFFFE, rPoint	    ; Pointer to Reset Vector?
	    jeq     CFW_Done		    ; Skip and exit Write
	    mov.b   rxData,0(rPoint)	    ; Write 8 bit data to flash

CFW_COMM:
CFW_Xor:    xor.b   @rPoint+,rCHKSUM	    ; xor checksum and inc pointer
	    jmp     CFW_w4d		    ; wait for next byte

CFW_Done:   ; ================================================================
	    ; rx'ed byte for adress 0xffe (RESET) contains checksum
	    ; ================================================================
	    mov.w   #(ACKCYCL/3),rTemp	    ; /3 because 3 CPU cycles per loop
					    ;  count required
	    cmp.b   rxData, rCHKSUM	    ; XOR'ing calc checksum with sent
	    jz	    SendACK		    ;  should result in ZERO if match

LoadNACK:   rra.w   rTemp		    ; Delay for FE half as long as for F8

SendACK:    bic.b   #TXD,&P1OUT 	    ; Initiate start bit
DelayACK:   dec.w   rTemp		    ; Decrement rTemp
	    jnz     DelayACK		    ; Delay over?
	    bis.b   #TXD,&P1OUT 	    ; back high for remaining bits and stop bit

StartOver:  jmp     Wait4sync

Copy:
	    mov.w   #EndHigh - RESET, rCount
MoveLoop:   mov.b   @rSource+, 0(rDest)
	    inc.w   rDest
	    dec.w   rCount
	    jnz     MoveLoop
EndLoop:    ret

;-------------------------------------------------------------------------------
RxOneByte:  ; CCR0/UART ISR, rxData Buffer holds UART Data
;-------------------------------------------------------------------------------


;-------------------------------------------------------------------------------
;	    Portion of BSL code in MAIN memory
;-------------------------------------------------------------------------------

.org	     0xFC00			  ;Portion located at start of MAIN memory

HIGHBASE:
;-------------------------------------------------------------------------------
;	    Start of BSL Code
;-------------------------------------------------------------------------------

RESET:
	    mov.b   #0,      &P1OUT	    ; pulldown resistor
	    bis.b   #BSLPIN, &P1REN	    ; enable resistor
	    bit.b   #BSLPIN, &P1IN	    ; Pin high invokes BSL
	    mov.b   #0, &P1REN		    ; restore P1REN

	    jz	    HIGHBASE+0x60	    ; pin low - jump to app

InvokeBsl:  mov.w   #0x280,SP		    ; Init Stackpointer to top of RAM

UnlockFlash: mov.w  #FWKEY,&FCTL3	    ; LOCK=0, all others 0, INFOA stays Hi

StopWDT:    mov.w   #WDTPW+WDTHOLD,&WDTCTL  ; Stop Watchdog Timer

SetupDCO:   ; Set DCO to calibrated 1 MHz:
	    mov.b   &CALDCO_1MHZ, &DCOCTL   ; Set DCO step + modulation
	    mov.b   &CALBC1_1MHZ, &BCSCTL1  ; Set range

SetupPins:  bis.b   #RXD,&P1SEL 	    ; Rx pin special function for TimerA
	    bis.b   #TXD,&P1OUT 	    ; Tx pin normally high
	    bis.b   #TXD,&P1DIR 	    ; Turn on output

SetupTA0:   ;CC Input0: Capture on falling Edge
	    mov.w   #CM_2+CCIS_0+SCS+CAP,&TACCTL0
	    ;Timer in Continuous mode, Clock Source is SMCLK
	    bis.w   #TASSEL_2+MC_2+TACLR,&TACTL

InitRx:
OV3:	    mov     #OVERapp, rPoint	    ; Point to beginning flash location = MAIN + 0x60
	    clr     rCHKSUM		    ; Init Checksum

OV2:	    mov.w   #OVERmain, rHighPoint
	    mov.w   rHighPoint, rSource     ; copy high portion to RAM before erasing MAIN
	    mov.w   #RAMM,     rDest
	    call    #Copy
	    mov.w   rHighPoint,  rDest      ; prep for copying back
	    br	    #INFOBASE		    ; jump to BSL code in INFO memory

EndHigh:			 ;Application should start here (FC60)



Application:   ;;;; place holder for future applications firmware, which will overwrite this ;;;;;

	bic.w	#GIE,		SR			;turn off interrupts
	bis.w	#LPM4,		SR			;everything off.

PowerUp:       ;;;; this program starts here on power up ;;;;;;;;;;

	mov.w	#0x0280,	SP			;set stack pointer to end of RAM
	mov.w	#WDTPW+WDTHOLD, &WDTCTL 		;stop WDT, set to timer
	mov.b	#0,		&IFG1			;clear all flags

	mov.w	#CalibLoc,			R10	;copy ADC10 and DCO calibrations to RAM
	mov.w	#(RAMM+CalibLoc-INFOABASE),	R11
	call	#XLoopB

;Set main clock to 8 MHz

	mov.w	&CALDCO_8MHZ,	R5			;Already calibrated 8MHz values?
	push	R5
	and.w	#0x0f00,	R5			;see if value looks reasonable
	cmp.w	#0x0d00,	R5			;range select should be 13 for 8 MHz
	pop	R5
	jnz	DoCal					;skip clibration if 8 MHz already there
;	 jmp DoCal					 ;always do calibration
	mov.b	R5,		&DCOCTL 		;set clock to 8 MHz
	swpb	R5
	mov.b	R5,		&BCSCTL1
	jmp	FindMAIN

DoCal:

	call	#Calibrate				;If not there, do 8MHz calibration

FindMAIN:

	mov.w	#0,		R12

FM2:

	mov.w	MAINTable(R12),	R15			;MAIN  begins here
	mov.w	R15,		R11                     ;save for future restore
	mov.w	DelayTable(R12),R14			;ACK value from G2xx1 - MAIN, INFO or Split
	cmp.w	#0xFC00,	R15			;if MAIN not found before FC00, assume FC00
	jz	Flash

	mov.w	@R15+,		R13			;look for three FFFFs to indicate valid flash memory
	and.w	@R15+,		R13
	and.w	@R15,		R13
	cmp.w	#0xFFFF,	R13
	jz	Flash					;found it

	add.w	#2,		R12			;try next candidate
	jmp	FM2


Flash:							;Copy BSL image and calibration bytes to INFO A-C

	mov.w	#FWKEY+LOCKA,		&FCTL3		;Unlock for erasing, toggle LOCKA off
	mov.w	#FWKEY+FSSEL_1+21,	&FCTL2		;MCLK, Div = 21 (22) = 364 KHz at 8 Mhz

	mov.w	#FWKEY+ERASE,	&FCTL1			;Enable Erase mode (auto-cleared after)
	clr.b	&INFOABASE				;dummy write to start erase of INFOA
							;assume INFOB and INFOC are already erased

	mov.w	#FWKEY+WRT,	&FCTL1			;switch from Erase to Write

	mov.w	R14,		&OV1+2			;modify BSL to reflect R15 and R14 results
	swpb	R15
	mov.b	R15,		&OV2+3			;location of MAIN for RAM save
	mov.b	R15,		&OV3+3			;location of MAIN for Appstart
	mov.w	R11,		R15			;restore

	mov.w	#0xFC00,	R10			;transfer MAIN part of BSL to MAIN
	mov.w	R15,		R11
	mov.w	#(PowerUp-RESET),   R12 		;should be 0x66 bytes  Hi BSL + Application
	cmp.w	#0xFC00,	R11			;if MAIN = FC00, skip transfer (already there)
	jz	Move2Info

	call	#XLoop

Move2Info:

	mov.w	#HiRx,		R10			;transfer rest of INFO part of BSL to INFO
	mov.w	#RxOneByte,	R11			;INFOC and most of INFOB already there
	mov.w	#(EndHi-HiRx),	R12  			;BSL image less cal info

	call	#XLoop

	mov.w	#RX_Count,		   R10          ;copy BSL RX table to RAM
	mov.w	#(RAMM+0x10EC-INFOABASE),  R11          ; lies between ADC10 and DCO data
	mov.w	#(EndRx-RX_Count),	   R12
	call	#XLoop

	mov.w	#(RAMM+CalibLoc-INFOABASE),	R10	;copy RAM to calibrations in INFOA.
	mov.w	#CalibLoc,			R11
	call	#XLoopB

	mov.w	#FWKEY, 	    &FCTL1		;Turn off Write mode
	mov.w	#FWKEY+LOCK+LOCKA,  &FCTL3		;Relock flash, toggle LOCKA back on

RES_VEC:						;erase top segment, then
							;  write reset vector pointing to BSL entry

	mov.w	#FWKEY, 	&FCTL3			;Unlock flash
	mov.w	#FWKEY+ERASE,	&FCTL1			;Enable Erase mode
	clr.b	&0xFE00 				;dummy write to start erase
	mov.w	#FWKEY+WRT,	&FCTL1			;switch from Erase to Write
	mov.w	R15,		&RESET_VECTOR		;write BSL entry point as PU/Reset vector
	mov.w	#FWKEY, 	&FCTL1			;Turn off Write mode
	mov.w	#FWKEY+LOCK,	&FCTL3			;Relock flash

; This section would set P1.6 as output high on completion, which would turn on the LED in
; the Launchpad.  But the default version doesn't do that because this software might be
; installed in-circuit, which might produce smoke depending on how P1.6 is being used.
;
;	  bis.b   #DoneFlag,	  &P1OUT		;sets P1.6 output high
;	  bis.b   #DoneFlag,	  &P1DIR

	nop						;these occupy the same space as the two above
	nop                                             ;  comment these if uncomment them
	nop
	nop
	nop
	nop

	bic.w	#GIE,		SR			;turn off interrupts
	bis.w	#LPM4,		SR			;everything off.

	jmp   $ 					;just in case we get here

MAINTable:	.dw	0xE000, 0xF000, 0xF800, 0xFC00
DelayTable:	.dw	277, 243, 312, 35		; 80, C0, FE, FF - low time / 3

XLoopB:

	mov.w	#(0x1100-CalibLoc),	R12		;10DC - 1100

XLoop:

	mov.b	@R10+,		0(R11)			;Copy BSL image to INFO
	inc.w	R11
	dec.w	R12
	jnz	XLoop
	ret


;;;;;;; End of Program ;;;;;;;;;;;;;;;;;;;;;;;;;

HiRx:					    ; This is the RXOneByte routine

	    mov.w   #0x10EC, rBitCnt	    ; RX_Count --> Branch Pointer

Wait4CCIFG: bit.w   #CCIFG, &TACCTL0	    ; Test CCIFG Bit - waiting for falling edge
	    jz	    Wait4CCIFG

	    add.w   #BITTIME,&TACCR0	    ; Bit time till next bit
	    bic.w   #CCIFG, &TACCTL0	    ; Clear IFG

	    mov.b   @rBitCnt+,rTemp	    ; Delta to next bit process
	    add     rTemp,PC		    ; Branch to that process

RX_Edge:    bic.w   #CAP+CCIFG,&TACCTL0     ; Switch to Compare mode
	    add.w   #BITTIME_5,&TACCR0	    ; First Databit 1.5 Bits from edge
	    jmp     Wait4CCIFG		    ; Wait for TimerA to match

RX_Bit:     bit.w   #SCCI,&TACCTL0	    ; Get bit waiting in SCCI
	    rrc.b   rxData		    ; Store received bit - CF set if not zero
	    jmp     Wait4CCIFG		    ;

RX_Comp:    ; Byte received. Store and enable next rx cycle
	    bis.w   #CAP,&TACCTL0	    ; Switch to Capture mode
RxDone:     ret 			    ;

EndHi:

;-------------------------------------------------------------------------------
;	    Jump table for UART Bit detection
;-------------------------------------------------------------------------------
RX_Count:   .db   RX_Edge-RX_Edge	    ; Special for TA
	    .db   RX_Bit-RX_Edge	    ; RX First Data Bit
	    .db   RX_Bit-RX_Edge	    ;
	    .db   RX_Bit-RX_Edge	    ;
	    .db   RX_Bit-RX_Edge	    ;
	    .db   RX_Bit-RX_Edge	    ;
	    .db   RX_Bit-RX_Edge	    ;
	    .db   RX_Bit-RX_Edge	    ;
	    .db   RX_Bit-RX_Edge	    ;
	    .db   RX_Comp-RX_Edge	    ; RX Complete, process RX data
TLV4DCO:    .db   1,8
EndRx:


SLOW		equ	0xff
FAST		equ	0

; Calibration register usage

Calword 	equ	R5
TotINTs 	equ	R9
CurINT		equ	R4
BegCnt		equ	R5
MHzFlag 	equ	R13
Delta1		equ	R6
Delta8		equ	R7
Entry		equ	R12
LastEntry	equ	R10
Dir		equ	R14
LastDir 	equ	R11
DCOTemp 	equ	R5
ABSD8D1 	equ	R8

;.org	0xfe00

Calibrate:	      ;Derives calibrated 8/12/16 MHz settings from calibrated 1 MHz settings in
		      ;INFO A, and sets DCOCTL and BCSCTL1 registers to the 8 MHz values,
		      ;so running at 8 MHz when return from this subroutine.

	mov.w	&CALDCO_1MHZ,	Calword 		;set clock to 1 MHz
	bic.w	#0xF000,	Calword
	add.w	#0xB000,	Calword 		;sets ACLK divider to 8
	mov.b	Calword,	&DCOCTL 		;set clock to calibrated 1 MHz
	swpb	Calword 				;  with ACLOCK divider = 8
	mov.b	Calword,	&BCSCTL1
	mov.b	#LFXT1S_2,	&BCSCTL3		;ACLK from VLO
	mov.w	#TACLR+MC_2+TASSEL_2,	     &TACTL	;set up and clear TA - 1 MHz Continuous
	mov.w	#CCIE+CAP+SCS+CCIS_1+CM_2,   &TACCTL0	;capture mode, falling, IEn, sync

	mov.w	#64,		TotINTs 		;total ACLK cycles per test
	mov.w	#0,		CurINT
	mov.w	#0,		MHzFlag 		;start at 1 MHz (high byte), find 8 MHz (low)
	mov.w	#GIE+CPUOFF,	    SR			;light sleep
	ret

TAIntSvc:

	cmp.w	#0,		CurINT			;beginning reading?
	jne	GetEnd					;no
	mov.w	&TACCR0,	BegCnt			;yes, save captured TA value
	mov.w	TotINTs,	CurINT			;target # of interrupts to collect
	reti

GetEnd:

	dec.w	CurINT
	jz	Difference				;if end of collection
	bit.w	#0x8000,	MHzFlag 		;is this the first collection at 1 MHz?
	jnz	NotFirst				;no
	cmp.w	#0x8000,	&TACCR0 		;yes - past maximum desired sample time?
	jnc	NotFirst				;no, then keep going
	sub.w	CurINT, 	TotINTs 		;yes, end sample here at TotINTs-CurINT
	mov.w	#0,		CurINT			;future ones will also end here
	jmp	Difference				;end of collection

NotFirst:

	reti

Difference:

	bit.w	#0x8000,	MHzFlag 		;still at 1 MHz?
	jnz	Test					;no, we're testing 8MHz guess
	mov.w	&TACCR0,	Delta1			;yes, save ending value
	sub.w	BegCnt, 	Delta1			;and calculate delta
	bis.w	#0x8000,	MHzFlag 		;going to 8 or higher MHz - Bit 15 of flag
	mov.b	#RSEL_13+DIVA_3+XT2OFF, &BCSCTL1	;probable range for 8 MHz = 13
	mov.b	#DIVS_3,		&BCSCTL2	;SMCLK divider = 8 now.  Net 1 MHz

NewBCS:

	mov.w	#12,		LastEntry
	mov.w	#SLOW,		LastDir
	mov.b	#0x20,		&DCOCTL 		;start near bottom

Reset1:

	bis.w	#TACLR, 	&TACTL			;clear timer - want count back to zero
	reti

FoundIt:

	cmp.w	#0x8000,	MHzFlag 		;did we just find 8 MHz?
	jnz	CheckNext				;no
	mov.b	&DCOCTL,	&0x023C 		;yes - save 8 MHz values
	mov.b	&BCSCTL1,	&0x023D
	bic.b	#DIVA_3,	&0x023D 		;Return ACLK divider to zero in copy

	inc.w	MHzFlag 				;update flag --  1 = working on 12 MHz
	mov.w	Delta1, 	&0x0240 		;now do 12 MHz - save Delta1
	clrc
	rrc.w	Delta1					;divide by 2, add 1
	add.w	&0x0240,	Delta1			;Delta1 now 1.5x old Delta1
							;so 12 MHz clock should match that
	inc.b	&BCSCTL1				;expected range of 12 MHz is 14
	jmp	NewBCS					;all dividers stay same

CheckNext:

	cmp.w	#0x8001,	MHzFlag 		;did we just find 12 MHz?
	jnz	Set8					;no, just finished 16 MHz, set clock back
	mov.b	&DCOCTL,	&0x023A 		;yes - save 12 MHz values
	mov.b	&BCSCTL1,	&0x023B
	bic.b	#DIVA_3,	&0x023B 		;Return ACLK divider to zero in copy

	inc.w	MHzFlag 				;update flag
	mov.w	&0x0240,	Delta1			;now do 16 MHz - restore Delta1
	bic.b	#DIVA_1,	&BCSCTL1		;change ACLK divider from 8 to 4, input now 2x
							;so 16 MHz clock will give same count
	mov.b	#0,		&DCOCTL 		;before going to RSEL 15
	inc.b	&BCSCTL1				;expected range of 16 MHz is 15
	nop
	jmp	NewBCS

Set8:

	mov.b	&DCOCTL,	&0x0238 		;save 16 MHz values
	mov.b	&BCSCTL1,	&0x0239
	bic.b	#DIVA_3,	&0x0239 		;Return ACLK divider to zero in copy

	dec.b	&BCSCTL1				;step down BCSCTL1
	nop
	dec.b	&BCSCTL1				;again
	nop
	mov.b	&0x023C,	&DCOCTL 		;set clock to saved 8 MHz
	mov.b	&0x023D,	&BCSCTL1
	mov.w	#0,		&TACCTL0		;Return BCS & TA to boot state at 8 MHz
	mov.w	#0,		&TACTL
	mov.b	#0,		&BCSCTL2
	mov.b	#0,		&BCSCTL3

Endcal:

	bic.w	#CPUOFF,	0(SP)			;CPU ON when return
	reti

Test:

	mov.w	&TACCR0,	Delta8			;test our guess - save ending result
	sub.w	BegCnt, 	Delta8			;calculate delta at 8 MHz

	cmp.w	Delta8, 	Delta1			;compare to initial delta at 1 MHz
	jz	FoundIt 				;same - we're done

	cmp.w	Delta8, 	Delta1			;Delta1 vs Delta8
	jnc	TooFast

TooSlow:						;Delta1 > Delta8 ---> clock too slow

	mov.w	#SLOW,		Dir			;need to go faster
	mov.w	Delta1, 	ABSD8D1
	sub.w	Delta8, 	ABSD8D1 		;absolute difference between Delta8 and Delta1
	jmp	FindEntry

TooFast:						;Delta8 > Delta1 ---> clock too fast

	mov.w	#FAST,		Dir			;need to go slower
	mov.w	Delta8, 	ABSD8D1
	sub.w	Delta1, 	ABSD8D1

FindEntry:						;Find highest table entry that is =< ABSD8D1

	mov.w	#12,		Entry			;For/Next loop, step = -2 (one word)

Looking:

	cmp.w	ABSD8D1,	DiffTable(Entry)	;Table entry - ABSD8D1
	jnc	GotIt					;First time Delta above table entry
	sub.w	#2,		Entry			;Delta still below table entry. Try lower entry
	jnz	Looking 				;but if Entry at zero, we're done.

GotIt:	cmp.w	Dir,		LastDir 		;same direction as last time?
	jnz	Crossover

DoNormal:						;change DCO per table

	mov.b	&DCOCTL,	DCOTemp
	cmp	#FAST,		Dir
	jz	FallMore

AddMore:

	cmp.b	#0xF0,		DCOTemp 		;already at F0, but still too slow?
	jnz	InRange
	inc.b	&BCSCTL1				;increase BCS
	jmp	NewBCS					;start over

InRange:

	add.b	DCOTable(Entry),  DCOTemp		;check if increase puts it over F0
	jc	Limit					;CF set means > FF
	cmp.b	#0xF1,		DCOTemp
	jnc	NewDCO					;CF clear means sum < F1, which is ok

Limit:

	mov.b	#0xF0,		DCOTemp 		;DCO = limit

NewDCO:

	mov.b	DCOTemp,	&DCOCTL 		;update DCOCTL

	mov.w	Dir,		LastDir
	mov.w	Entry,		LastEntry
	jmp	Reset1					;test new setting

FallMore:

	cmp.b	#0,		DCOTemp 		;already at zero, but still too fast?
	jnz	InRange2
	dec.b	&BCSCTL1				;decrease BCS
	jmp	NewBCS					;start over

InRange2:

	sub.b	DCOTable(Entry),  DCOTemp
	jc	NewDCO					;CF set means DCO will not be below zero
	mov.b	#0,		DCOTemp 		;otherwise, make it zero
	jmp	NewDCO

Crossover:						;from too slow to too fast, or vice versa

	cmp.w	#0,		Entry			;are current and last Entries both lowest?
	jnz	NotZeros
	cmp.w	#0,		LastEntry
	jnz	NotZeros

	cmp.w	#FAST,		Dir			;yes.  If now at faster one, accept it
	jz	FoundIt
	inc	&DCOCTL 				;otherwise, go back to faster one, and accept it

	jmp	FoundIt

NotZeros:

	cmp.w	#0,		LastEntry		;find table entry one step below LastEntry
	jz	NoDec
	sub.w	#2,		LastEntry

NoDec:							;if crossover, next table entry will be lesser of
							;   current Entry value or one step below previous

	cmp.w	Entry,		LastEntry		;lesser of
	jc	DoNormal
	mov.w	LastEntry,	Entry
	jmp	DoNormal

DiffTable:						;how far off we are - number of clocks

	.dw	0,256,512,1024,2048,4096,8192

DCOTable:						;how much to change DCOCTL by

	.dw	1,2,4,8,16,32,64

;Set Vectors

	.org	TIMERA0_VECTOR
	.dw	TAIntSvc

	.org	RESET_VECTOR
	.dw	PowerUp
